name: Deploy to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

          # Create deployment script
          cat > deploy.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e
          
          echo "=== Starting deployment ==="
          
          # Create directory if it doesn't exist
          mkdir -p /home/ubuntu/munbon2-backend
          cd /home/ubuntu/munbon2-backend
          
          # Create docker-compose.ec2.yml
          cat > docker-compose.ec2.yml << 'EOF'
version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: munbon_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  sensor-data:
    image: subhaj888/munbon-sensor-data:latest
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
    depends_on:
      - postgres

  auth:
    image: subhaj888/munbon-auth:latest
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
      JWT_SECRET: your-secret-key-here
    depends_on:
      - postgres

  gis:
    image: subhaj888/munbon-gis:latest
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
    depends_on:
      - postgres

volumes:
  postgres_data:
EOF
          
          # Pull latest images from Docker Hub
          echo "Pulling latest images..."
          docker pull subhaj888/munbon-sensor-data:latest
          docker pull subhaj888/munbon-auth:latest
          docker pull subhaj888/munbon-gis:latest
          
          # Stop existing services
          echo "Stopping existing services..."
          docker-compose -f docker-compose.ec2.yml down || true
          
          # Start services with new images
          echo "Starting services..."
          docker-compose -f docker-compose.ec2.yml up -d
          
          # Wait for services to start
          sleep 10
          
          # Show status
          echo "=== Deployment complete ==="
          docker-compose -f docker-compose.ec2.yml ps
          docker ps
          DEPLOY_SCRIPT

          # Copy and execute deployment script
          scp -i ~/.ssh/deploy_key deploy.sh "$EC2_USER@$EC2_HOST:/tmp/"
          ssh -i ~/.ssh/deploy_key "$EC2_USER@$EC2_HOST" 'bash /tmp/deploy.sh'