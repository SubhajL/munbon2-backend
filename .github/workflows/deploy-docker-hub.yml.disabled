name: Deploy via Docker Hub

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Node.js services
          - service: sensor-data
            context: ./services/sensor-data
          - service: auth
            context: ./services/auth
          - service: moisture-monitoring
            context: ./services/moisture-monitoring
          - service: weather-monitoring
            context: ./services/weather-monitoring
          - service: water-level-monitoring
            context: ./services/water-level-monitoring
          - service: gis
            context: ./services/gis
          - service: rid-ms
            context: ./services/rid-ms
          - service: ros
            context: ./services/ros
          - service: awd-control
            context: ./services/awd-control
          # Python services
          - service: flow-monitoring
            context: ./services/flow-monitoring
          - service: gravity-optimizer
            context: ./services/gravity-optimizer
          - service: water-accounting
            context: ./services/water-accounting
          - service: sensor-network-management
            context: ./services/sensor-network-management

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/munbon-${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/munbon-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          # Create SSH key file
          echo "$EC2_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          
          # Deploy directly without heredoc
          ssh -o StrictHostKeyChecking=no -i deploy_key $EC2_USER@$EC2_HOST << ENDSSH
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          echo -e "\${BLUE}Starting Docker deployment to EC2...\${NC}"
          
          # Navigate to project directory
          cd ~/munbon2-backend || {
            echo "Creating project directory..."
            mkdir -p ~/munbon2-backend
            cd ~/munbon2-backend
          }
          
          # Pull latest code
          if [ -d ".git" ]; then
            echo -e "\${BLUE}Pulling latest changes...\${NC}"
            git fetch --all
            git reset --hard origin/main
            git pull origin main
          else
            echo -e "\${BLUE}Cloning repository...\${NC}"
            git clone https://github.com/SubhajL/munbon2-backend.git .
          fi
          
          # Create .env.ec2 if not exists
          if [ ! -f ".env.ec2" ]; then
            echo -e "\${BLUE}Creating .env.ec2 file...\${NC}"
            if [ -f ".env.ec2.example" ]; then
              cp .env.ec2.example .env.ec2
            else
              echo "Warning: .env.ec2.example not found"
            fi
          fi
          
          # Stop existing containers
          echo -e "\${BLUE}Stopping existing Docker containers...\${NC}"
          sudo docker compose -f docker-compose.ec2.yml down || true
          
          # Pull latest images from Docker Hub
          echo -e "\${BLUE}Pulling latest Docker images from Docker Hub...\${NC}"
          export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"
          sudo DOCKERHUB_USERNAME=\${DOCKERHUB_USERNAME} docker compose -f docker-compose.ec2.yml pull
          
          # Start all services
          echo -e "\${BLUE}Starting all services...\${NC}"
          sudo DOCKERHUB_USERNAME=\${DOCKERHUB_USERNAME} docker compose -f docker-compose.ec2.yml up -d
          
          # Wait for services
          echo -e "\${BLUE}Waiting for services to be ready...\${NC}"
          sleep 30
          
          # Check container status
          echo -e "\${BLUE}Checking container status...\${NC}"
          sudo docker compose -f docker-compose.ec2.yml ps
          
          echo -e "\${GREEN}Docker deployment completed!\${NC}"
          echo -e "\${BLUE}Service URLs:\${NC}"
          echo "- http://${EC2_HOST}:3001 (Sensor Data)"
          echo "- http://${EC2_HOST}:3002 (Auth)"
          echo "- http://${EC2_HOST}:3003 (Moisture Monitoring)"
          echo "- http://${EC2_HOST}:3004 (Weather Monitoring)"
          echo "- http://${EC2_HOST}:3005 (Water Level Monitoring)"
          echo "- http://${EC2_HOST}:3006 (GIS)"
          echo "- http://${EC2_HOST}:3011 (RID-MS)"
          echo "- http://${EC2_HOST}:3012 (ROS)"
          echo "- http://${EC2_HOST}:3013 (AWD Control)"
          echo "- http://${EC2_HOST}:3014 (Flow Monitoring)"
          ENDSSH
          
          # Cleanup
          rm deploy_key

      - name: Health Check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "Waiting for services to start..."
          sleep 10
          
          # Check if services are responding
          echo "Checking service health..."
          services=(
            "sensor-data:3001"
            "auth:3002"
            "gis:3006"
          )
          
          for service in "${services[@]}"; do
            IFS=':' read -r name port <<< "$service"
            printf "Checking %s on port %s... " "$name" "$port"
            if curl -f -s "http://$EC2_HOST:$port/health" > /dev/null 2>&1; then
              echo "✓ Healthy"
            else
              echo "✗ Not responding"
            fi
          done