name: Fixed Docker Builds

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Node.js services
          - service: sensor-data
            type: node
          - service: auth
            type: node
          - service: gis
            type: node
          - service: ros
            type: node
          - service: rid-ms
            type: node
          - service: moisture-monitoring
            type: node
          - service: weather-monitoring
            type: node
          - service: water-level-monitoring
            type: node
          - service: awd-control
            type: node
          # Python services
          - service: flow-monitoring
            type: python
          - service: gravity-optimizer
            type: python
          - service: water-accounting
            type: python
          - service: sensor-network-management
            type: python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Node.js service for build
        if: matrix.type == 'node'
        run: |
          cd services/${{ matrix.service }}
          
          # Remove @munbon/shared dependency temporarily
          if grep -q "@munbon/shared" package.json; then
            echo "Removing @munbon/shared dependency for Docker build"
            # Create a backup
            cp package.json package.json.bak
            # Remove the line with @munbon/shared
            grep -v "@munbon/shared" package.json > package.json.tmp && mv package.json.tmp package.json
          fi
          
          # Generate package-lock.json if missing
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json"
            npm install --package-lock-only
          fi
          
          # Create a simple Dockerfile if build issues persist
          if [ "${{ matrix.service }}" = "rid-ms" ] || [ "${{ matrix.service }}" = "moisture-monitoring" ] || [ "${{ matrix.service }}" = "weather-monitoring" ] || [ "${{ matrix.service }}" = "water-level-monitoring" ]; then
            cat > Dockerfile.simple << 'EOF'
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production || npm install --production
COPY . .
EXPOSE 3000
CMD ["node", "src/index.js"]
EOF
          fi

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile${{ (matrix.service == 'rid-ms' || matrix.service == 'moisture-monitoring' || matrix.service == 'weather-monitoring' || matrix.service == 'water-level-monitoring') && '.simple' || '' }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/munbon-${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/munbon-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "$EC2_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -o StrictHostKeyChecking=no -i deploy_key $EC2_USER@$EC2_HOST << 'ENDSSH'
          set -e
          echo "Deploying to EC2..."
          
          cd ~/munbon2-backend || {
            mkdir -p ~/munbon2-backend
            cd ~/munbon2-backend
            git clone https://github.com/SubhajL/munbon2-backend.git .
          }
          
          git pull origin main
          
          # Create .env file if needed
          if [ ! -f ".env" ]; then
            cp .env.example .env 2>/dev/null || echo "No .env.example found"
          fi
          
          # Pull and run services
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          sudo DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME docker compose -f docker-compose.ec2.yml pull
          sudo DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME docker compose -f docker-compose.ec2.yml up -d
          
          sleep 10
          sudo docker ps
          
          echo "Deployment complete!"
          ENDSSH
          
          rm deploy_key