name: Build and Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      deploy-needed: ${{ steps.changes.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for service changes
        id: changes
        run: |
          # Check if any service files changed
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/"; then
            echo "services=true" >> $GITHUB_OUTPUT
          else
            echo "services=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.changes.outputs.services == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.changes.outputs.services == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sensor-data
        if: steps.changes.outputs.services == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd services/sensor-data
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm install --production --force || true
          COPY . .
          EXPOSE 3001
          CMD ["node", "src/index.js"]
          EOF
          docker build -t subhaj888/munbon-sensor-data:latest .
          docker push subhaj888/munbon-sensor-data:latest

      - name: Build and push auth
        if: steps.changes.outputs.services == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd services/auth
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm install --production --force || true
          COPY . .
          EXPOSE 3000
          CMD ["node", "src/index.js"]
          EOF
          docker build -t subhaj888/munbon-auth:latest .
          docker push subhaj888/munbon-auth:latest

      - name: Build and push gis
        if: steps.changes.outputs.services == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd services/gis
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm install --production --force || true
          COPY . .
          EXPOSE 3000
          CMD ["node", "src/index.js"]
          EOF
          docker build -t subhaj888/munbon-gis:latest .
          docker push subhaj888/munbon-gis:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success() && (needs.build-and-push.outputs.deploy-needed == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

          # Deploy script
          ssh -i ~/.ssh/deploy_key "$EC2_USER@$EC2_HOST" << 'DEPLOY'
          set -e
          
          echo "=== Deploying Munbon Backend ==="
          
          # Create directory
          mkdir -p /home/ubuntu/munbon2-backend
          cd /home/ubuntu/munbon2-backend
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: munbon_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  sensor-data:
    image: subhaj888/munbon-sensor-data:latest
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
    depends_on:
      - postgres
    restart: unless-stopped

  auth:
    image: subhaj888/munbon-auth:latest
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
      JWT_SECRET: your-secret-key-here
    depends_on:
      - postgres
    restart: unless-stopped

  gis:
    image: subhaj888/munbon-gis:latest
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/munbon_db
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
EOF
          
          # Pull latest images
          echo "Pulling latest images..."
          docker pull subhaj888/munbon-sensor-data:latest
          docker pull subhaj888/munbon-auth:latest
          docker pull subhaj888/munbon-gis:latest
          
          # Restart services
          echo "Restarting services..."
          docker-compose down || true
          docker-compose up -d
          
          # Wait and check
          sleep 10
          echo "=== Deployment Status ==="
          docker-compose ps
          echo ""
          echo "=== Service URLs ==="
          echo "Sensor Data: http://${{ secrets.EC2_HOST }}:3001"
          echo "Auth Service: http://${{ secrets.EC2_HOST }}:3002"
          echo "GIS Service: http://${{ secrets.EC2_HOST }}:3003"
          DEPLOY