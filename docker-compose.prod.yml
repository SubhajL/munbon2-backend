# Production Docker Compose for Munbon Backend
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # Override development settings for production
  
  # API Gateway - Production build
  api-gateway:
    build:
      target: production
    volumes: []  # No volume mounts in production
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Auth Service - Production build
  auth-service:
    build:
      target: production
    volumes: []
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AWD Control - Production build
  awd-control:
    build:
      dockerfile: Dockerfile  # Use production Dockerfile
    volumes: []
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Sensor Data Service
  sensor-data:
    build:
      context: ./services/sensor-data
      dockerfile: Dockerfile
    container_name: munbon-sensor-data
    environment:
      <<: *common-variables
      PORT: 3003
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
      TIMESCALE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@timescaledb:5432/munbon_timescale
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - timescaledb
      - redis
      - kafka
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Weather Monitoring Service
  weather-monitoring:
    build:
      context: ./services/weather-monitoring
      dockerfile: Dockerfile
    container_name: munbon-weather-monitoring
    environment:
      <<: *common-variables
      PORT: 3006
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
      TIMESCALE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@timescaledb:5432/munbon_timescale
    ports:
      - "3006:3006"
    depends_on:
      - postgres
      - timescaledb
      - redis
    restart: unless-stopped

  # Water Level Monitoring Service
  water-level-monitoring:
    build:
      context: ./services/water-level-monitoring
      dockerfile: Dockerfile
    container_name: munbon-water-level-monitoring
    environment:
      <<: *common-variables
      PORT: 3008
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
      TIMESCALE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@timescaledb:5432/munbon_timescale
    ports:
      - "3008:3008"
    depends_on:
      - postgres
      - timescaledb
      - redis
    restart: unless-stopped

  # Moisture Monitoring Service
  moisture-monitoring:
    build:
      context: ./services/moisture-monitoring
      dockerfile: Dockerfile
    container_name: munbon-moisture-monitoring
    environment:
      <<: *common-variables
      PORT: 3005
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
      TIMESCALE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@timescaledb:5432/munbon_timescale
    ports:
      - "3005:3005"
    depends_on:
      - postgres
      - timescaledb
      - redis
    restart: unless-stopped

  # GIS Service
  gis:
    build:
      context: ./services/gis
      dockerfile: Dockerfile
    container_name: munbon-gis
    environment:
      <<: *common-variables
      PORT: 3007
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
    ports:
      - "3007:3007"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # ROS Service
  ros:
    build:
      context: ./services/ros
      dockerfile: Dockerfile
    container_name: munbon-ros
    environment:
      <<: *common-variables
      PORT: 3047
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
    ports:
      - "3047:3047"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # RID-MS Service
  rid-ms:
    build:
      context: ./services/rid-ms
      dockerfile: Dockerfile
    container_name: munbon-rid-ms
    environment:
      <<: *common-variables
      PORT: 3009
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/munbon_prod
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3009:3009"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Remove development tools in production
  kafka-ui:
    profiles:
      - never  # Disable in production

  mongo-express:
    profiles:
      - never  # Disable in production

  redis-commander:
    profiles:
      - never  # Disable in production