# Fixed Docker Compose for Munbon Backend Services
# Resolves npm issues by using yarn and proper initialization

services:
  # =================
  # Infrastructure
  # =================
  
  redis:
    image: redis:7-alpine
    container_name: munbon-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - munbon-network

  # =================
  # Node.js Services (Fixed)
  # =================

  # 1. Auth Service (3001) - Fixed with yarn
  auth:
    image: node:18
    container_name: munbon-auth
    working_dir: /app
    volumes:
      - ./services/auth:/app
    environment:
      PORT: 3001
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-test-secret}
    command: sh -c "
      if [ ! -d node_modules ]; then
        npm cache clean --force &&
        rm -rf node_modules package-lock.json &&
        npm install --verbose;
      fi &&
      npm run dev || node src/index.js"
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 2. Sensor Data Service (3003) - Already working
  sensor-data:
    image: node:18
    container_name: munbon-sensor-data
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
      - sensor-data-modules:/app/node_modules
    environment:
      PORT: 3003
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      REDIS_URL: redis://redis:6379
      VALID_TOKENS: ${VALID_TOKENS:-munbon-ridr-water-level:water-level,munbon-m2m-moisture:moisture}
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # 3. GIS Service (3007) - Fixed with npm cache clean
  gis:
    image: node:18
    container_name: munbon-gis
    working_dir: /app
    volumes:
      - ./services/gis:/app
    environment:
      PORT: 3007
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      GIS_SCHEMA: gis
    command: sh -c "
      if [ ! -d node_modules ]; then
        npm cache clean --force &&
        rm -rf node_modules package-lock.json &&
        npm install --verbose;
      fi &&
      npm run dev || node src/index.js"
    ports:
      - "3007:3007"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 4. ROS Service (3047) - Already working
  ros:
    image: node:18
    container_name: munbon-ros
    working_dir: /app
    volumes:
      - ./services/ros:/app
      - ros-modules:/app/node_modules
    environment:
      PORT: 3047
      NODE_ENV: development
      DB_HOST: 43.209.22.250
      DB_PORT: 5432
      DB_NAME: munbon_dev
      DB_SCHEMA: ros
      DB_USER: postgres
      DB_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3047:3047"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3047/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # 5. Weather Monitoring (3006)
  weather-monitoring:
    image: node:18
    container_name: munbon-weather-monitoring
    working_dir: /app
    volumes:
      - ./services/weather-monitoring:/app
    environment:
      PORT: 3006
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/sensor_data
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3006:3006"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 6. Water Level Monitoring (3008)
  water-level-monitoring:
    image: node:18
    container_name: munbon-water-level-monitoring
    working_dir: /app
    volumes:
      - ./services/water-level-monitoring:/app
    environment:
      PORT: 3008
      NODE_ENV: development
      TIMESCALE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/sensor_data
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3008:3008"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 7. Moisture Monitoring (3009)
  moisture-monitoring:
    image: node:18
    container_name: munbon-moisture-monitoring
    working_dir: /app
    volumes:
      - ./services/moisture-monitoring:/app
    environment:
      PORT: 3009
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3009:3009"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 8. AWD Control (3010)
  awd-control:
    image: node:18
    container_name: munbon-awd-control
    working_dir: /app
    volumes:
      - ./services/awd-control:/app
    environment:
      PORT: 3010
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_SCHEMA: awd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3010:3010"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 9. RID Management (3012)
  rid-ms:
    image: node:18
    container_name: munbon-rid-ms
    working_dir: /app
    volumes:
      - ./services/rid-ms:/app
    environment:
      PORT: 3012
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=rid
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3012:3012"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 10. Sensor Network Management (3016)
  sensor-network-management:
    image: node:18
    container_name: munbon-sensor-network-management
    working_dir: /app
    volumes:
      - ./services/sensor-network-management:/app
    environment:
      PORT: 3016
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=sensor_network
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    ports:
      - "3016:3016"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # 11. Sensor Consumer
  sensor-consumer:
    image: node:18
    container_name: munbon-sensor-consumer
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
      - sensor-consumer-modules:/app/node_modules
    environment:
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      AWS_REGION: ${AWS_REGION:-ap-southeast-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
    command: sh -c "npm install --legacy-peer-deps && npm run consumer"
    depends_on:
      - sensor-data
    restart: unless-stopped
    networks:
      - munbon-network

  # =================
  # Python Services (Fixed)
  # =================

  # 12. Flow Monitoring (3011) - Fixed with proper Python image
  flow-monitoring:
    image: python:3.11-slim
    container_name: munbon-flow-monitoring
    working_dir: /app
    volumes:
      - ./services/flow-monitoring:/app
    environment:
      PORT: 3011
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apt-get update && apt-get install -y gcc g++ && 
      pip install --upgrade pip && 
      pip install -r requirements.txt && 
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3011 --reload"
    ports:
      - "3011:3011"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped
    networks:
      - munbon-network

  # 13. ROS-GIS Integration (3013)
  ros-gis-integration:
    image: python:3.11-slim
    container_name: munbon-ros-gis-integration
    working_dir: /app
    volumes:
      - ./services/ros-gis-integration:/app
    environment:
      PORT: 3013
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      ROS_SERVICE_URL: http://ros:3047
      GIS_SERVICE_URL: http://gis:3007
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apt-get update && apt-get install -y gcc g++ && 
      pip install --upgrade pip && 
      pip install -r requirements.txt && 
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3013 --reload"
    ports:
      - "3013:3013"
    depends_on:
      - redis
      - ros
      - gis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped
    networks:
      - munbon-network

  # 14. Gravity Optimizer (3014) - Fixed with proper Python image
  gravity-optimizer:
    image: python:3.11-slim
    container_name: munbon-gravity-optimizer
    working_dir: /app
    volumes:
      - ./services/gravity-optimizer:/app
    environment:
      PORT: 3014
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apt-get update && apt-get install -y gcc g++ && 
      pip install --upgrade pip && 
      pip install -r requirements.txt && 
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3014 --reload"
    ports:
      - "3014:3014"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped
    networks:
      - munbon-network

  # 15. Water Accounting (3015) - Already working
  water-accounting:
    image: python:3.11-slim
    container_name: munbon-water-accounting
    working_dir: /app
    volumes:
      - ./services/water-accounting:/app
    environment:
      PORT: 3015
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=water_accounting
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apt-get update && apt-get install -y gcc g++ && 
      pip install --upgrade pip && 
      pip install -r requirements.txt && 
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3015 --reload"
    ports:
      - "3015:3015"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped
    networks:
      - munbon-network

  # 16. Scheduler (3017) - Fixed with proper Python image
  scheduler:
    image: python:3.11-slim
    container_name: munbon-scheduler
    working_dir: /app
    volumes:
      - ./services/scheduler:/app
    environment:
      PORT: 3017
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=scheduler
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apt-get update && apt-get install -y gcc g++ curl && 
      pip install --upgrade pip && 
      pip install -r requirements.txt && 
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3017 --reload"
    ports:
      - "3017:3017"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped
    networks:
      - munbon-network

  # 17. Unified API (3000)
  unified-api:
    image: node:18
    container_name: munbon-unified-api
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
    environment:
      PORT: 3000
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --legacy-peer-deps && node src/unified-api.js"
    ports:
      - "3000:3000"
    depends_on:
      - auth
      - sensor-data
      - gis
      - ros
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

networks:
  munbon-network:
    driver: bridge
    name: munbon-network

volumes:
  redis-data:
  sensor-data-modules:
  sensor-consumer-modules:
  ros-modules: