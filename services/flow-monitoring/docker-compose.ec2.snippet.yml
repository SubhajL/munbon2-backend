# Flow Monitoring Service Configuration for docker-compose.ec2.yml
# Replace the existing flow-monitoring service with this configuration

  flow-monitoring:
    image: ${DOCKERHUB_USERNAME}/munbon-flow-monitoring:latest
    container_name: munbon-flow-monitoring
    environment:
      <<: *common-variables
      PORT: 3011
      SERVICE_NAME: flow-monitoring
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      # API Configuration
      API_PREFIX: /api/v1
      CORS_ORIGINS: "*"
      # Database URLs - EC2 PostgreSQL
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.209.22.250:5432/munbon_dev
      POSTGRES_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.209.22.250:5432/munbon_dev
      TIMESCALE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.209.22.250:5432/sensor_data
      # InfluxDB Configuration
      INFLUXDB_URL: ${INFLUXDB_URL:-http://influxdb:8086}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: munbon
      INFLUXDB_BUCKET: flow-data
      # Redis Configuration
      REDIS_URL: redis://redis:6379/12
      # Kafka Configuration
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:9092}
      KAFKA_TOPIC_SENSORS: flow.sensor.data
      KAFKA_CONSUMER_GROUP: flow-monitoring-service
      # Service Configuration
      MAX_BATCH_SIZE: 1000
      BATCH_TIMEOUT_MS: 500
      MANUAL_UPDATE_INTERVAL: 3600
    ports:
      - "3011:3011"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    <<: *resource-limits
    volumes:
      - ./services/flow-monitoring/src/munbon_network_final.json:/app/src/munbon_network_final.json:ro
      - ./services/flow-monitoring/canal_geometry_template.json:/app/canal_geometry_template.json:ro