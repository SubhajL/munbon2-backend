"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canalRoutes = void 0;
const express_1 = require("express");
const canal_controller_1 = require("../controllers/canal.controller");
const auth_1 = require("../middleware/auth");
const authorize_1 = require("../middleware/authorize");
const validate_request_1 = require("../middleware/validate-request");
const canal_validator_1 = require("../validators/canal.validator");
const router = (0, express_1.Router)();
exports.canalRoutes = router;
router.use(auth_1.authenticate);
router.get('/', canal_controller_1.canalController.getAllCanals);
router.get('/:id', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.getCanalById);
router.post('/query', (0, validate_request_1.validateRequest)(canal_validator_1.queryCanalSchema), canal_controller_1.canalController.queryCanals);
router.get('/:id/flow-history', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.getFlowHistory);
router.get('/:id/connected-gates', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.getConnectedGates);
router.get('/network/topology', canal_controller_1.canalController.getNetworkTopology);
router.use((0, authorize_1.authorize)(['STAFF', 'OPERATOR', 'ADMIN', 'SYSTEM_ADMIN']));
router.put('/:id/status', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.updateCanalStatus);
router.post('/:id/flow', (0, validate_request_1.validateRequest)(canal_validator_1.flowUpdateSchema), canal_controller_1.canalController.updateFlowRate);
router.get('/:id/maintenance-history', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.getMaintenanceHistory);
router.use((0, authorize_1.authorize)(['ADMIN', 'SYSTEM_ADMIN']));
router.post('/', (0, validate_request_1.validateRequest)(canal_validator_1.createCanalSchema), canal_controller_1.canalController.createCanal);
router.put('/:id', (0, validate_request_1.validateRequest)(canal_validator_1.updateCanalSchema), canal_controller_1.canalController.updateCanal);
router.put('/:id/geometry', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.updateCanalGeometry);
router.delete('/:id', (0, validate_request_1.validateRequest)(canal_validator_1.canalIdSchema), canal_controller_1.canalController.deleteCanal);
router.post('/network/analyze', canal_controller_1.canalController.analyzeNetwork);
router.post('/network/optimize-flow', canal_controller_1.canalController.optimizeFlow);
router.get('/network/bottlenecks', canal_controller_1.canalController.identifyBottlenecks);
router.post('/bulk/import', canal_controller_1.canalController.bulkImportCanals);
router.put('/bulk/update', canal_controller_1.canalController.bulkUpdateCanals);
//# sourceMappingURL=canal.routes.js.map