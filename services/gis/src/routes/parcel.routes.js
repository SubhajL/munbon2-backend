"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parcelRoutes = void 0;
const express_1 = require("express");
const parcel_controller_1 = require("../controllers/parcel.controller");
const auth_1 = require("../middleware/auth");
const authorize_1 = require("../middleware/authorize");
const validate_request_1 = require("../middleware/validate-request");
const parcel_validator_1 = require("../validators/parcel.validator");
const router = (0, express_1.Router)();
exports.parcelRoutes = router;
router.use(auth_1.authenticate);
router.get('/', parcel_controller_1.parcelController.getAllParcels);
router.get('/:id', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), parcel_controller_1.parcelController.getParcelById);
router.post('/query', (0, validate_request_1.validateRequest)(parcel_validator_1.queryParcelSchema), parcel_controller_1.parcelController.queryParcels);
router.get('/:id/history', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), parcel_controller_1.parcelController.getParcelHistory);
router.get('/owner/:ownerId', parcel_controller_1.parcelController.getParcelsByOwner);
router.get('/:id/crop-plan', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), (0, authorize_1.authorize)(['FARMER', 'STAFF', 'ADMIN']), parcel_controller_1.parcelController.getCropPlan);
router.put('/:id/crop-plan', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), (0, authorize_1.authorize)(['FARMER', 'STAFF', 'ADMIN']), parcel_controller_1.parcelController.updateCropPlan);
router.use((0, authorize_1.authorize)(['STAFF', 'ADMIN', 'SYSTEM_ADMIN']));
router.post('/', (0, validate_request_1.validateRequest)(parcel_validator_1.createParcelSchema), parcel_controller_1.parcelController.createParcel);
router.put('/:id', (0, validate_request_1.validateRequest)(parcel_validator_1.updateParcelSchema), parcel_controller_1.parcelController.updateParcel);
router.put('/:id/geometry', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), parcel_controller_1.parcelController.updateParcelGeometry);
router.post('/:id/transfer', (0, validate_request_1.validateRequest)(parcel_validator_1.transferOwnershipSchema), parcel_controller_1.parcelController.transferOwnership);
router.use((0, authorize_1.authorize)(['ADMIN', 'SYSTEM_ADMIN']));
router.delete('/:id', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), parcel_controller_1.parcelController.deleteParcel);
router.post('/bulk/import', parcel_controller_1.parcelController.bulkImportParcels);
router.put('/bulk/update', parcel_controller_1.parcelController.bulkUpdateParcels);
router.post('/merge', parcel_controller_1.parcelController.mergeParcels);
router.post('/:id/split', (0, validate_request_1.validateRequest)(parcel_validator_1.parcelIdSchema), parcel_controller_1.parcelController.splitParcel);
//# sourceMappingURL=parcel.routes.js.map