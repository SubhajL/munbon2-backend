service: munbon-sensor-ingestion

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    SQS_QUEUE_URL: 
      Ref: SensorDataQueue
    VALID_TOKENS: >
      munbon-ridr-water-level:water-level-munbon,
      munbon-m2m-moisture:moisture-munbon,
      munbon-test-devices:test-devices
    STAGE: ${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [SensorDataQueue, Arn]
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  # Existing HTTPS endpoints - NO CHANGES
  telemetry:
    handler: handler.telemetry
    events:
      - http:
          path: /api/v1/{token}/telemetry
          method: post
          cors: true
          request:
            parameters:
              paths:
                token: true
  
  attributes:
    handler: handler.attributes
    events:
      - http:
          path: /api/v1/{token}/attributes
          method: get
          cors: true
          request:
            parameters:
              paths:
                token: true
              querystrings:
                sharedKeys: false
  
  # NEW HTTP endpoints for legacy devices
  telemetryHttp:
    handler: handler.telemetry
    events:
      - httpApi:
          path: /http/moisture/{token}
          method: post
  
  telemetryHttpWater:
    handler: handler.telemetry
    events:
      - httpApi:
          path: /http/water-level/{token}
          method: post

resources:
  Resources:
    SensorDataQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-queue
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SensorDataDLQ, Arn]
          maxReceiveCount: 3

    SensorDataDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-dlq
        MessageRetentionPeriod: 1209600

  Outputs:
    ApiGatewayUrl:
      Description: API Gateway endpoint URL (HTTPS)
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - Ref: AWS::Region
            - ".amazonaws.com/"
            - ${self:provider.stage}
    SensorDataQueueUrl:
      Description: SQS Queue URL
      Value:
        Ref: SensorDataQueue
    SensorDataQueueArn:
      Description: SQS Queue ARN
      Value:
        Fn::GetAtt: [SensorDataQueue, Arn]

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001