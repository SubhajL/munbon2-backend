apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: munbon-databases
spec:
  clusterIP: None
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-lb
  namespace: munbon-databases
spec:
  type: LoadBalancer
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: mongodb
    role: primary
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: munbon-databases
spec:
  serviceName: mongodb
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mongodb
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: init-mongodb
        image: mongo:7
        command:
        - bash
        - -c
        - |
          set -e
          # Generate keyfile for replica set authentication
          if [ ! -f /data/keyfile/mongodb-keyfile ]; then
            openssl rand -base64 756 > /data/keyfile/mongodb-keyfile
            chmod 400 /data/keyfile/mongodb-keyfile
            chown 999:999 /data/keyfile/mongodb-keyfile
          fi
        volumeMounts:
        - name: keyfile
          mountPath: /data/keyfile
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_INITDB_ROOT_PASSWORD
        - name: MONGO_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_APP_PASSWORD
        - name: MONGO_BACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_BACKUP_PASSWORD
        command:
        - mongod
        - --config=/etc/mongod.conf
        - --auth
        - --keyFile=/data/keyfile/mongodb-keyfile
        volumeMounts:
        - name: data
          mountPath: /data/db
        - name: config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: keyfile
          mountPath: /data/keyfile
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: mongodb-config
      - name: init-scripts
        configMap:
          name: mongodb-init-scripts
      - name: keyfile
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd  # Change based on your cluster