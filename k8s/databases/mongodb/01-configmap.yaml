apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: munbon-databases
data:
  mongod.conf: |
    # MongoDB configuration file
    
    # Where and how to store data
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      engine: wiredTiger
      wiredTiger:
        engineConfig:
          cacheSizeGB: 2
          journalCompressor: snappy
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    
    # Network interfaces
    net:
      port: 27017
      bindIp: 0.0.0.0
      maxIncomingConnections: 1000
    
    # Security
    security:
      authorization: enabled
      javascriptEnabled: true
    
    # Operation Profiling
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100
    
    # Replication
    replication:
      replSetName: munbon-rs
    
    # Process Management
    processManagement:
      timeZoneInfo: /usr/share/zoneinfo
    
    # Set parameter options
    setParameter:
      enableLocalhostAuthBypass: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-scripts
  namespace: munbon-databases
data:
  01-init-mongo.js: |
    // MongoDB initialization script
    db = db.getSiblingDB('admin');
    
    // Create root user
    db.createUser({
      user: 'root',
      pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
      roles: ['root']
    });
    
    // Create application users
    db.createUser({
      user: 'munbon_app',
      pwd: process.env.MONGO_APP_PASSWORD,
      roles: [
        { role: 'readWrite', db: 'munbon_prod' },
        { role: 'readWrite', db: 'munbon_config' },
        { role: 'readWrite', db: 'munbon_logs' }
      ]
    });
    
    // Create backup user
    db.createUser({
      user: 'backup_user',
      pwd: process.env.MONGO_BACKUP_PASSWORD,
      roles: [
        { role: 'backup', db: 'admin' },
        { role: 'restore', db: 'admin' }
      ]
    });