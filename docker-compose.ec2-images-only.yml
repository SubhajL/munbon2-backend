# Docker Compose for EC2 - Pre-built Images Only
# This file uses only Docker images, no source code needed on EC2

version: '3.8'

x-common-variables: &common-variables
  NODE_ENV: production
  LOG_LEVEL: info
  JWT_SECRET: ${JWT_SECRET}
  REDIS_URL: redis://redis:6379
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-P@ssw0rd123!}
  TIMESCALE_HOST: postgres
  TIMESCALE_PORT: 5432
  TIMESCALE_USER: postgres
  TIMESCALE_PASSWORD: ${POSTGRES_PASSWORD:-P@ssw0rd123!}

services:
  # Database
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: munbon-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-P@ssw0rd123!}
      POSTGRES_DB: munbon_dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: munbon-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Pre-built service images
  # These need to be built and pushed to a registry first
  # For now, we'll use the GitHub Container Registry (ghcr.io)
  
  sensor-data:
    image: ghcr.io/subhajl/munbon-sensor-data:latest
    container_name: munbon-sensor-data
    environment:
      <<: *common-variables
      PORT: 3003
      TIMESCALE_DB: sensor_data
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/sensor_data
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  sensor-data-consumer:
    image: ghcr.io/subhajl/munbon-sensor-data:latest
    container_name: munbon-sensor-data-consumer
    command: ["npm", "run", "consumer:prod"]
    environment:
      <<: *common-variables
      CONSUMER_PORT: 3004
      TIMESCALE_DB: sensor_data
      AWS_REGION: ${AWS_REGION:-ap-southeast-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  default:
    name: munbon-network