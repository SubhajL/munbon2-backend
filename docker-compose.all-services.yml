# Docker Compose for All Backend Services using EC2 Database
# Uses pre-built images to avoid DNS build issues
# All services connect to EC2 PostgreSQL at 43.209.22.250:5432

version: '3.8'

services:
  # =================
  # Infrastructure
  # =================
  
  # Redis (Local)
  redis:
    image: redis:7-alpine
    container_name: munbon-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - munbon-network

  # =================
  # Core Services
  # =================

  # 1. Auth Service (Port 3001)
  auth:
    image: node:18-alpine
    container_name: munbon-auth
    working_dir: /app
    volumes:
      - ./services/auth:/app
    environment:
      PORT: 3001
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: test-secret
    command: sh -c "npm install && npm run dev"
    ports:
      - "3001:3001"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 2. Sensor Data Service (Port 3003)
  sensor-data:
    image: node:18-alpine
    container_name: munbon-sensor-data
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
    environment:
      PORT: 3003
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      REDIS_URL: redis://redis:6379
      VALID_TOKENS: munbon-ridr-water-level:water-level,munbon-m2m-moisture:moisture
    command: sh -c "npm install && npm run dev"
    ports:
      - "3003:3003"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 3. Sensor Data Consumer
  sensor-consumer:
    image: node:18-alpine
    container_name: munbon-sensor-consumer
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
    environment:
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      AWS_REGION: ap-southeast-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
    command: sh -c "npm install && npm run consumer"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 4. Weather Monitoring (Port 3006)
  weather-monitoring:
    image: node:18-alpine
    container_name: munbon-weather-monitoring
    working_dir: /app
    volumes:
      - ./services/weather-monitoring:/app
    environment:
      PORT: 3006
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/sensor_data
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install && npm run dev"
    ports:
      - "3006:3006"
    networks:
      - munbon-network

  # 5. GIS Service (Port 3007)
  gis:
    image: node:18-alpine
    container_name: munbon-gis
    working_dir: /app
    volumes:
      - ./services/gis:/app
    environment:
      PORT: 3007
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      GIS_SCHEMA: gis
    command: sh -c "npm install && npm run dev"
    ports:
      - "3007:3007"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 6. Water Level Monitoring (Port 3008)
  water-level-monitoring:
    image: node:18-alpine
    container_name: munbon-water-level-monitoring
    working_dir: /app
    volumes:
      - ./services/water-level-monitoring:/app
    environment:
      PORT: 3008
      NODE_ENV: development
      TIMESCALE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/sensor_data
    command: sh -c "npm install && npm run dev"
    ports:
      - "3008:3008"
    networks:
      - munbon-network

  # 7. Moisture Monitoring (Port 3009)
  moisture-monitoring:
    image: node:18-alpine
    container_name: munbon-moisture-monitoring
    working_dir: /app
    volumes:
      - ./services/moisture-monitoring:/app
    environment:
      PORT: 3009
      NODE_ENV: development
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install && npm run dev"
    ports:
      - "3009:3009"
    networks:
      - munbon-network

  # 8. AWD Control (Port 3010)
  awd-control:
    image: node:18-alpine
    container_name: munbon-awd-control
    working_dir: /app
    volumes:
      - ./services/awd-control:/app
    environment:
      PORT: 3010
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_SCHEMA: awd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install && npm run dev"
    ports:
      - "3010:3010"
    networks:
      - munbon-network

  # 9. Flow Monitoring (Port 3011) - Python
  flow-monitoring:
    image: python:3.11-alpine
    container_name: munbon-flow-monitoring
    working_dir: /app
    volumes:
      - ./services/flow-monitoring:/app
    environment:
      PORT: 3011
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    command: sh -c "apk add --no-cache gcc musl-dev postgresql-dev && pip install -r requirements.txt && python -m uvicorn src.main:app --host 0.0.0.0 --port 3011 --reload"
    ports:
      - "3011:3011"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 10. RID Management Service (Port 3012)
  rid-ms:
    image: node:18-alpine
    container_name: munbon-rid-ms
    working_dir: /app
    volumes:
      - ./services/rid-ms:/app
    environment:
      PORT: 3012
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=rid
    command: sh -c "npm install && npm run dev"
    ports:
      - "3012:3012"
    networks:
      - munbon-network

  # 11. ROS Service (Port 3047)
  ros:
    image: node:18-alpine
    container_name: munbon-ros
    working_dir: /app
    volumes:
      - ./services/ros:/app
    environment:
      PORT: 3047
      NODE_ENV: development
      DB_HOST: 43.209.22.250
      DB_PORT: 5432
      DB_NAME: munbon_dev
      DB_SCHEMA: ros
      DB_USER: postgres
      DB_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install && npm run dev"
    ports:
      - "3047:3047"
    depends_on:
      - redis
    networks:
      - munbon-network

  # 12. ROS-GIS Integration (Port 3013) - Python
  ros-gis-integration:
    image: python:3.11-alpine
    container_name: munbon-ros-gis-integration
    working_dir: /app
    volumes:
      - ./services/ros-gis-integration:/app
    environment:
      PORT: 3013
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      ROS_SERVICE_URL: http://ros:3047
      GIS_SERVICE_URL: http://gis:3007
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    command: sh -c "apk add --no-cache gcc musl-dev postgresql-dev && pip install -r requirements.txt && python -m uvicorn src.main:app --host 0.0.0.0 --port 3013 --reload"
    ports:
      - "3013:3013"
    depends_on:
      - redis
      - ros
      - gis
    networks:
      - munbon-network

  # 13. Gravity Optimizer (Port 3014) - Python
  gravity-optimizer:
    image: python:3.11-alpine
    container_name: munbon-gravity-optimizer
    working_dir: /app
    volumes:
      - ./services/gravity-optimizer:/app
    environment:
      PORT: 3014
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      PYTHONUNBUFFERED: 1
    command: sh -c "apk add --no-cache gcc musl-dev postgresql-dev && pip install -r requirements.txt && python -m uvicorn src.main:app --host 0.0.0.0 --port 3014 --reload"
    ports:
      - "3014:3014"
    networks:
      - munbon-network

  # 14. Water Accounting (Port 3015) - Python
  water-accounting:
    image: python:3.11-alpine
    container_name: munbon-water-accounting
    working_dir: /app
    volumes:
      - ./services/water-accounting:/app
    environment:
      PORT: 3015
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=water_accounting
      PYTHONUNBUFFERED: 1
    command: sh -c "apk add --no-cache gcc musl-dev postgresql-dev && pip install -r requirements.txt && python -m uvicorn src.main:app --host 0.0.0.0 --port 3015 --reload"
    ports:
      - "3015:3015"
    networks:
      - munbon-network

  # 15. Sensor Network Management (Port 3016)
  sensor-network-management:
    image: node:18-alpine
    container_name: munbon-sensor-network-management
    working_dir: /app
    volumes:
      - ./services/sensor-network-management:/app
    environment:
      PORT: 3016
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=sensor_network
    command: sh -c "npm install && npm run dev"
    ports:
      - "3016:3016"
    networks:
      - munbon-network

  # 16. Scheduler Service (Port 3017) - Python
  scheduler:
    image: python:3.11-alpine
    container_name: munbon-scheduler
    working_dir: /app
    volumes:
      - ./services/scheduler:/app
    environment:
      PORT: 3017
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=scheduler
      PYTHONUNBUFFERED: 1
    command: sh -c "apk add --no-cache gcc musl-dev postgresql-dev && pip install -r requirements.txt && python -m uvicorn src.main:app --host 0.0.0.0 --port 3017 --reload"
    ports:
      - "3017:3017"
    networks:
      - munbon-network

  # 17. Unified API Gateway (Port 3000)
  unified-api:
    image: node:18-alpine
    container_name: munbon-unified-api
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
    environment:
      PORT: 3000
      NODE_ENV: development
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install && node src/unified-api.js"
    ports:
      - "3000:3000"
    depends_on:
      - auth
      - sensor-data
      - gis
      - ros
    networks:
      - munbon-network

networks:
  munbon-network:
    driver: bridge
    name: munbon-network

volumes:
  redis-data: