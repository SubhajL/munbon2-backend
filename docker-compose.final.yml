# Final Optimized Docker Compose for Munbon Backend Services
# Minimizes disk usage and avoids package installation issues

services:
  # =================
  # Core Infrastructure
  # =================
  
  redis:
    image: redis:7-alpine
    container_name: munbon-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - munbon-network

  # =================
  # Essential Node.js Services
  # =================

  # Sensor Data Service (3003) - Core service
  sensor-data:
    image: node:18-alpine
    container_name: munbon-sensor-data
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
    environment:
      PORT: 3003
      NODE_ENV: production
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      REDIS_URL: redis://redis:6379
      VALID_TOKENS: munbon-ridr-water-level:water-level,munbon-m2m-moisture:moisture
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # ROS Service (3047) - Core service
  ros:
    image: node:18-alpine
    container_name: munbon-ros
    working_dir: /app
    volumes:
      - ./services/ros:/app
    environment:
      PORT: 3047
      NODE_ENV: production
      DB_HOST: 43.209.22.250
      DB_PORT: 5432
      DB_NAME: munbon_dev
      DB_SCHEMA: ros
      DB_USER: postgres
      DB_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3047:3047"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3047/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # Auth Service (3001)
  auth:
    image: node:18-alpine
    container_name: munbon-auth
    working_dir: /app
    volumes:
      - ./services/auth:/app
    environment:
      PORT: 3001
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: test-secret-for-development
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # GIS Service (3007)
  gis:
    image: node:18-alpine
    container_name: munbon-gis
    working_dir: /app
    volumes:
      - ./services/gis:/app
    environment:
      PORT: 3007
      NODE_ENV: production
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      GIS_SCHEMA: gis
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3007:3007"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # AWD Control (3010)
  awd-control:
    image: node:18-alpine
    container_name: munbon-awd-control
    working_dir: /app
    volumes:
      - ./services/awd-control:/app
    environment:
      PORT: 3010
      NODE_ENV: production
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_SCHEMA: awd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3010:3010"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # =================
  # Python Services (Lightweight)
  # =================

  # Flow Monitoring (3011)
  flow-monitoring:
    image: python:3.11-alpine
    container_name: munbon-flow-monitoring
    working_dir: /app
    volumes:
      - ./services/flow-monitoring:/app
    environment:
      PORT: 3011
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apk add --no-cache gcc musl-dev libffi-dev postgresql-dev &&
      pip install --no-cache-dir -r requirements.txt &&
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3011"
    ports:
      - "3011:3011"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # Water Accounting (3015)
  water-accounting:
    image: python:3.11-alpine
    container_name: munbon-water-accounting
    working_dir: /app
    volumes:
      - ./services/water-accounting:/app
    environment:
      PORT: 3015
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=water_accounting
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apk add --no-cache gcc musl-dev libffi-dev postgresql-dev &&
      pip install --no-cache-dir -r requirements.txt &&
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3015"
    ports:
      - "3015:3015"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # Scheduler (3017)
  scheduler:
    image: python:3.11-alpine
    container_name: munbon-scheduler
    working_dir: /app
    volumes:
      - ./services/scheduler:/app
    environment:
      PORT: 3017
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=scheduler
      PYTHONUNBUFFERED: 1
    command: sh -c "
      apk add --no-cache gcc musl-dev libffi-dev postgresql-dev &&
      pip install --no-cache-dir -r requirements.txt &&
      python -m uvicorn src.main:app --host 0.0.0.0 --port 3017"
    ports:
      - "3017:3017"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - munbon-network

  # =================
  # Additional Node Services (Phase 2)
  # =================

  # Weather Monitoring (3006)
  weather-monitoring:
    image: node:18-alpine
    container_name: munbon-weather-monitoring
    working_dir: /app
    volumes:
      - ./services/weather-monitoring:/app
    environment:
      PORT: 3006
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/sensor_data
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3006:3006"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

  # Moisture Monitoring (3009)
  moisture-monitoring:
    image: node:18-alpine
    container_name: munbon-moisture-monitoring
    working_dir: /app
    volumes:
      - ./services/moisture-monitoring:/app
    environment:
      PORT: 3009
      NODE_ENV: production
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
    command: sh -c "npm install --production --no-save && npm start || npm run dev"
    ports:
      - "3009:3009"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - munbon-network

networks:
  munbon-network:
    driver: bridge
    name: munbon-network

volumes:
  redis-data: