# Debug-Optimized Docker Compose for Frontend Integration
# Maximum visibility, hot reload, comprehensive logging
# One-shot success configuration

version: '3.8'

services:
  # =================
  # INFRASTRUCTURE
  # =================
  
  redis:
    image: redis:7-alpine
    container_name: debug-redis
    command: redis-server --loglevel debug --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - debug-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =================
  # API GATEWAY / UNIFIED API (Port 3000)
  # =================
  
  api-gateway:
    image: node:18
    container_name: debug-api-gateway
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
      - ./debug-utils:/app/debug-utils
      - /app/node_modules  # Prevent node_modules override
    environment:
      NODE_ENV: debug
      PORT: 3000
      LOG_LEVEL: debug
      ENABLE_REQUEST_LOGGING: true
      ENABLE_RESPONSE_LOGGING: true
      CORS_ORIGIN: "*"
      CORS_CREDENTIALS: true
      # Service URLs for proxying
      AUTH_SERVICE_URL: http://auth:3001
      SENSOR_SERVICE_URL: http://sensor-data:3003
      GIS_SERVICE_URL: http://gis:3007
      ROS_SERVICE_URL: http://ros:3047
      # Database
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      # Redis
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    command: |
      sh -c "
        npm install --save morgan cors-debug axios-debug-log winston express-status-monitor
        npm install
        echo 'Starting API Gateway with debug logging...'
        npx nodemon --watch src --watch debug-utils --exec 'node -r ./debug-utils/debug-bootstrap.js src/unified-api.js'
      "
    depends_on:
      - redis
    networks:
      - debug-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/debug/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =================
  # AUTH SERVICE (Port 3001)
  # =================
  
  auth:
    image: node:18
    container_name: debug-auth
    working_dir: /app
    volumes:
      - ./services/auth:/app
      - ./debug-utils:/app/debug-utils
      - /app/node_modules
    environment:
      NODE_ENV: debug
      PORT: 3001
      LOG_LEVEL: debug
      DATABASE_URL: postgresql://postgres:P@ssw0rd123!@43.209.22.250:5432/munbon_dev?schema=auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: debug-secret-key
      JWT_EXPIRY: 7d
      CORS_ORIGIN: "*"
      ENABLE_TEST_ENDPOINTS: true
      ENABLE_REQUEST_LOGGING: true
      MOCK_AUTH: true  # Allow test tokens
    ports:
      - "3001:3001"
    command: |
      sh -c "
        npm install
        npm install --save jsonwebtoken bcrypt morgan
        echo 'Starting Auth Service with debug mode and test endpoints...'
        npx nodemon --watch src --exec ts-node src/index.ts
      "
    depends_on:
      - redis
    networks:
      - debug-network

  # =================
  # SENSOR DATA SERVICE (Port 3003)
  # =================
  
  sensor-data:
    image: node:18
    container_name: debug-sensor-data
    working_dir: /app
    volumes:
      - ./services/sensor-data:/app
      - ./debug-utils:/app/debug-utils
      - /app/node_modules
    environment:
      NODE_ENV: debug
      PORT: 3003
      LOG_LEVEL: debug
      ENABLE_REQUEST_LOGGING: true
      ENABLE_SQL_LOGGING: true
      # TimescaleDB
      TIMESCALE_HOST: 43.209.22.250
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: P@ssw0rd123!
      # Redis
      REDIS_URL: redis://redis:6379
      # CORS
      CORS_ORIGIN: "*"
      # Mock data
      ENABLE_MOCK_DATA: true
      MOCK_DATA_INTERVAL: 5000
      # Tokens
      VALID_TOKENS: debug-token:debug,munbon-ridr-water-level:water-level,munbon-m2m-moisture:moisture
    ports:
      - "3003:3003"
    command: |
      sh -c "
        npm install
        npm install --save morgan pg-monitor
        echo 'Starting Sensor Data Service with SQL logging and mock data...'
        npx nodemon --watch src --watch debug-utils --exec ts-node src/cmd/server/main.ts
      "
    depends_on:
      - redis
    networks:
      - debug-network

  # =================
  # GIS SERVICE (Port 3007)
  # =================
  
  gis:
    image: node:18
    container_name: debug-gis
    working_dir: /app
    volumes:
      - ./services/gis:/app
      - ./debug-utils:/app/debug-utils
      - /app/node_modules
    environment:
      NODE_ENV: debug
      PORT: 3007
      LOG_LEVEL: debug
      POSTGRES_HOST: 43.209.22.250
      POSTGRES_PORT: 5432
      POSTGRES_DB: munbon_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: P@ssw0rd123!
      GIS_SCHEMA: gis
      CORS_ORIGIN: "*"
      ENABLE_REQUEST_LOGGING: true
      ENABLE_GEOJSON_DEBUG: true
      MOCK_PARCELS: true
    ports:
      - "3007:3007"
    command: |
      sh -c "
        npm install
        npm install --save morgan @turf/turf
        echo 'Starting GIS Service with GeoJSON debugging...'
        npx nodemon --watch src --exec ts-node src/index.ts
      "
    depends_on:
      - redis
    networks:
      - debug-network

  # =================
  # ROS SERVICE (Port 3047)
  # =================
  
  ros:
    image: node:18
    container_name: debug-ros
    working_dir: /app
    volumes:
      - ./services/ros:/app
      - ./debug-utils:/app/debug-utils
      - /app/node_modules
    environment:
      NODE_ENV: debug
      PORT: 3047
      LOG_LEVEL: debug
      DB_HOST: 43.209.22.250
      DB_PORT: 5432
      DB_NAME: munbon_dev
      DB_SCHEMA: ros
      DB_USER: postgres
      DB_PASSWORD: P@ssw0rd123!
      CORS_ORIGIN: "*"
      ENABLE_REQUEST_LOGGING: true
      ENABLE_CALCULATION_DEBUG: true
      SHOW_WATER_DEMAND_CALC: true
    ports:
      - "3047:3047"
    command: |
      sh -c "
        npm install
        npm install --save morgan chalk cli-table3
        echo 'Starting ROS Service with calculation debugging...'
        npx nodemon --watch src --exec ts-node src/index.ts
      "
    depends_on:
      - redis
    networks:
      - debug-network

  # =================
  # DEBUG DASHBOARD (Port 9999)
  # =================
  
  debug-dashboard:
    image: node:18
    container_name: debug-dashboard
    working_dir: /app
    volumes:
      - ./debug-utils:/app
    environment:
      PORT: 9999
      SERVICES: auth:3001,sensor-data:3003,gis:3007,ros:3047
      REDIS_URL: redis://redis:6379
    ports:
      - "9999:9999"
    command: |
      sh -c "
        npm init -y
        npm install express cors socket.io redis bull-board @bull-board/express
        node debug-dashboard.js
      "
    depends_on:
      - redis
    networks:
      - debug-network

  # =================
  # REQUEST LOGGER (Port 9998)
  # =================
  
  request-logger:
    image: node:18
    container_name: debug-request-logger
    working_dir: /app
    volumes:
      - ./debug-utils:/app
      - ./logs:/app/logs
    environment:
      PORT: 9998
      LOG_DIR: /app/logs
    ports:
      - "9998:9998"
    command: |
      sh -c "
        npm init -y
        npm install express cors ws tail
        node request-viewer.js
      "
    networks:
      - debug-network

networks:
  debug-network:
    driver: bridge
    name: debug-network

volumes:
  debug-logs:
    name: debug-logs