version: '3.8'

services:
  unified-api:
    build:
      context: ./services/sensor-data
      dockerfile: Dockerfile
    image: munbon/unified-api:latest
    container_name: munbon-unified-api
    ports:
      - "3000:3000"
    environment:
      # API Configuration
      API_PORT: 3000
      NODE_ENV: production
      
      # API Keys
      INTERNAL_API_KEY: ${INTERNAL_API_KEY:-munbon-internal-f3b89263126548}
      EXTERNAL_API_KEYS: ${EXTERNAL_API_KEYS:-test-key,rid-ms-prod-key1,tmd-weather-key2,university-key3}
      
      # TimescaleDB connection (using existing container)
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: sensor_data
      TIMESCALE_USER: postgres
      TIMESCALE_PASSWORD: ${POSTGRES_PASSWORD:-P@ssw0rd123!}
      
      # MSSQL connection (optional)
      MSSQL_HOST: ${MSSQL_HOST:-localhost}
      MSSQL_DB: ${MSSQL_DB:-SCADA_DB}
      MSSQL_USER: ${MSSQL_USER:-sa}
      MSSQL_PASSWORD: ${MSSQL_PASSWORD:-your_password}
      MSSQL_PORT: ${MSSQL_PORT:-1433}
      
      # Rate limiting
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 1000
      CACHE_TTL: 300
    
    networks:
      - munbon-network
    
    # TimescaleDB is running externally
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3

  # TimescaleDB is already running as a separate container

networks:
  munbon-network:
    external: true
    name: munbon-network

# Volumes are managed by the external TimescaleDB container